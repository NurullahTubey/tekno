import os
import json
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QVBoxLayout
from PyQt5.QtCore import QStringListModel, QUrl
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtMultimedia import QCamera, QCameraInfo
from PyQt5.QtMultimediaWidgets import QCameraViewfinder

import AnaSayfa_python
from ekleme import eklemePage

DATA_FILE = "liste_verileri.json"  # Kaydedilecek dosya

class anasayfaPage(QMainWindow):
    def __init__(self):
        super().__init__()
        self.anaform = AnaSayfa_python.Ui_MainWindow()
        self.anaform.setupUi(self)
        self.ekleme_pencere_ac = eklemePage()

        # Liste iÃ§in model oluÅŸtur
        self.model = QStringListModel()
        self.liste_elemanlari = self.yukle_verileri()
        self.model.setStringList(self.liste_elemanlari)
        self.anaform.listView.setModel(self.model)

        # Buton sinyalleri
        self.anaform.Buton_ekle.clicked.connect(self.Ekle)
        self.anaform.Buton_sil.clicked.connect(self.Sil)

        # ğŸ“Œ Harita GÃ¶rÃ¼ntÃ¼leme
        self.webview = self.anaform.AnaHarita
        file_path = os.path.abspath("map.html")
        local_url = QUrl.fromLocalFile(file_path)
        self.webview.setUrl(local_url)

        # ğŸ“Œ Kamera GÃ¶rÃ¼ntÃ¼sÃ¼nÃ¼ **tam ekran kaplayacak ÅŸekilde** ayarla
        self.kamera_aygiti = self._kamera_sec()
        if self.kamera_aygiti:
            self.kamera = QCamera(self.kamera_aygiti)
            
            # Kamera gÃ¶rÃ¼ntÃ¼sÃ¼nÃ¼ tam kaplayacak ÅŸekilde ayarlayalÄ±m
            self.viewfinder = QCameraViewfinder()
            self.viewfinder.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)  
            self.viewfinder.setMinimumSize(self.anaform.kamera.size())  # Kamera alanÄ±nÄ±n boyutunu al
            
            

            # Layout oluÅŸtur ve kamera alanÄ±na ekle
            layout = QVBoxLayout()
            layout.addWidget(self.viewfinder)
            layout.setContentsMargins(0, 0, 0, 0)  # Kenar boÅŸluklarÄ±nÄ± sÄ±fÄ±rla
            self.anaform.kamera.setLayout(layout)  

            self.kamera.setViewfinder(self.viewfinder)
            self.kamera.start()  # KamerayÄ± baÅŸlat

    def _kamera_sec(self):
        """VarsayÄ±lan kamerayÄ± seÃ§er."""
        kamera_listesi = QCameraInfo.availableCameras()
        if kamera_listesi:
            return kamera_listesi[0]  # Ä°lk kamerayÄ± kullan
        return None

    def Ekle(self):
        """Ekleme butonuna basÄ±nca ekleme sayfasÄ±nÄ± aÃ§ar ve ana sayfayÄ± tamamen kapatÄ±r."""
        text = self.anaform.lineEdit_ekle.text().strip()

        if not text:
            QMessageBox.warning(self, "Hata", "LÃ¼tfen bir isim giriniz!")
            return

        if text in self.liste_elemanlari:
            QMessageBox.warning(self, "Hata", "Bu isim zaten eklenmiÅŸ!")
            return

        self.liste_elemanlari.append(text)
        self.model.setStringList(self.liste_elemanlari)
        self.model.layoutChanged.emit()
        self.kaydet_verileri()

        self.anaform.lineEdit_ekle.clear()
        self.close()
        self.ekleme_pencere_ac.show()

        self.ekleme_pencere_ac.closeEvent = self.ekleme_kontrol

    def Sil(self):
        """ListView Ã¼zerinden seÃ§ilen veya lineEdit_sil iÃ§indeki metne gÃ¶re elemanÄ± siler."""
        selected_index = self.anaform.listView.currentIndex().row()
        silinecek_metin = self.anaform.lineEdit_sil.text().strip()

        if selected_index != -1:
            silinecek_metin = self.liste_elemanlari[selected_index]

        if silinecek_metin in self.liste_elemanlari:
            self.liste_elemanlari.remove(silinecek_metin)
            self.model.setStringList(self.liste_elemanlari)
            self.model.layoutChanged.emit()
            self.kaydet_verileri()

            self.anaform.lineEdit_sil.clear()
        else:
            QMessageBox.warning(self, "Hata", "Silinecek Ã¶ÄŸe bulunamadÄ±!")

    def ekleme_kontrol(self, event):
        """Ekleme penceresi kapandÄ±ÄŸÄ±nda iptal edilip edilmediÄŸini kontrol eder."""
        if self.ekleme_pencere_ac.iptal_edildi:
            if self.liste_elemanlari:
                self.liste_elemanlari.pop()
                self.model.setStringList(self.liste_elemanlari)
                self.model.layoutChanged.emit()
                self.kaydet_verileri()
        
        self.show()
        event.accept()

    def kaydet_verileri(self):
        """Liste verilerini dosyaya kaydeder."""
        with open(DATA_FILE, "w", encoding="utf-8") as dosya:
            json.dump(self.liste_elemanlari, dosya)

    def yukle_verileri(self):
        """KayÄ±tlÄ± verileri dosyadan yÃ¼kler."""
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as dosya:
                return json.load(dosya)
        return []
